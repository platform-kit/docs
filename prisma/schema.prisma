generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  @@map(name: "users")
  id                Int                @id @default(autoincrement())
  uuid              String             @unique @default(uuid()) @db.Uuid
  email             String?
  oauth_id          String             @unique
  name              String?
  pages             Page[]
  contentItems      ContentItem[]
  subscriptionPlans SubscriptionPlan[]
  analyticEvents    AnalyticEvent[]
  Products          Product[]
  stripeId          String             @unique
}

model Page {
  @@map(name: "pages")
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  publishAt DateTime @default(now())
  content   String?
  published Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  json      Json
}

enum ContentType {
  text
  audio
  video
  link
  iframe
}

model ContentItem {
  @@map(name: "content_items")
  id                 Int               @id @default(autoincrement())
  uuid               String            @unique @default(uuid()) @db.Uuid
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  publishAt          DateTime          @default(now())
  contentType        ContentType       @default(text)
  thumbnail          String?
  cover              String?
  content            String
  contentPreview     String
  excerpt            String?
  published          Boolean           @default(false)
  user               User              @relation(fields: [userId], references: [id])
  userId             Int
  json               Json
  requiredPlan       SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId Int
}

enum PricingInterval {
  day
  week
  month
  year
}

model Product {
  @@map(name: "products")
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishAt   DateTime @default(now())
  thumbnail   String?
  name        String
  description String
  slug        String
  price_usd   Int
  published   Boolean  @default(false)
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  stripeId    String?  @unique
}

model SubscriptionPlan {
  @@map(name: "subscription_plans")
  id          Int             @id @default(autoincrement())
  uuid        String          @unique @default(uuid()) @db.Uuid
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  publishAt   DateTime        @default(now())
  name        String
  description String
  slug        String
  price_usd   Int
  interval    PricingInterval @default(month)
  published   Boolean         @default(false)
  user        User?           @relation(fields: [userId], references: [id])
  userId      Int?
  stripeId    String?         @unique
  ContentItem ContentItem[]
}

model AnalyticEvent {
  @@map(name: "analytic_events")
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        String
  description String?
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  json        Json?
}
